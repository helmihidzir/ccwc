#!/usr/bin/env ruby

=begin
Note:

Command pattern to consider
1. ./ccwc test.txt            [./ccwc <input>]
2. ./ccwc -c test.txt         [./ccwc <options> <input>]
3. echo test.txt | ./ccwc     [<standard input> ./ccwc]
4. echo test.txt | .ccwc -c   [<standard input> ./ccwc <options>]

- First argument can be either command or file or no command
- If first argument is command, we need to check second argument for the input
  - If first argument is empty, use default command
  - Check if is null value for second argument
    - If second argument is null, check for standard input
    - If second argument is not null, it safe to assumed it is file
=end

class Ccwc
  def initialize(input)
    @input = input
  end

  def number_of_bytes
    @input.bytesize
  end

  def number_of_lines
    @input.lines.count
  end

  def number_of_words
    @input.split.count
  end

  def number_of_characters
    @input.size
  end

  def process(options)
    output = ""

    if options.empty?
      output << " #{number_of_lines} #{number_of_words} #{number_of_bytes} "
    end

    if options.include?("c")
      output << " #{number_of_bytes} "
    end

    if options.include?("l")
      output << " #{number_of_lines} "
    end

    if options.include?("w")
      output << " #{number_of_words} "
    end

    if options.include?("m")
      output << " #{number_of_characters} "
    end

    puts output
  end
end

input = ARGV[0]
options = (!input.nil? && input.split("").first) == "-" ? input : ""

input = ARGV[1] if !options.empty?
input = input.nil? ? $stdin.read : File.read(input)

ccwc = Ccwc.new(input)
ccwc.process(options)